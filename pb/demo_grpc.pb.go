// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: demo.proto

package pb

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DemoClient is the client API for Demo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DemoClient interface {
	UnaryDemo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	BulkUpload(ctx context.Context, opts ...grpc.CallOption) (Demo_BulkUploadClient, error)
	BulkDownload(ctx context.Context, in *Request, opts ...grpc.CallOption) (Demo_BulkDownloadClient, error)
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Demo_DoubleStreamClient, error)
}

type demoClient struct {
	cc grpc.ClientConnInterface
}

func NewDemoClient(cc grpc.ClientConnInterface) DemoClient {
	return &demoClient{cc}
}

func (c *demoClient) UnaryDemo(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/ire.restgwdemo.v1.Demo/UnaryDemo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *demoClient) BulkUpload(ctx context.Context, opts ...grpc.CallOption) (Demo_BulkUploadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[0], "/ire.restgwdemo.v1.Demo/BulkUpload", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBulkUploadClient{stream}
	return x, nil
}

type Demo_BulkUploadClient interface {
	Send(*Request) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type demoBulkUploadClient struct {
	grpc.ClientStream
}

func (x *demoBulkUploadClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoBulkUploadClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) BulkDownload(ctx context.Context, in *Request, opts ...grpc.CallOption) (Demo_BulkDownloadClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[1], "/ire.restgwdemo.v1.Demo/BulkDownload", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoBulkDownloadClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Demo_BulkDownloadClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type demoBulkDownloadClient struct {
	grpc.ClientStream
}

func (x *demoBulkDownloadClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *demoClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Demo_DoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Demo_ServiceDesc.Streams[2], "/ire.restgwdemo.v1.Demo/DoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &demoDoubleStreamClient{stream}
	return x, nil
}

type Demo_DoubleStreamClient interface {
	Send(*Request) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type demoDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *demoDoubleStreamClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *demoDoubleStreamClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DemoServer is the server API for Demo service.
// All implementations must embed UnimplementedDemoServer
// for forward compatibility
type DemoServer interface {
	UnaryDemo(context.Context, *Request) (*Response, error)
	BulkUpload(Demo_BulkUploadServer) error
	BulkDownload(*Request, Demo_BulkDownloadServer) error
	DoubleStream(Demo_DoubleStreamServer) error
	mustEmbedUnimplementedDemoServer()
}

// UnimplementedDemoServer must be embedded to have forward compatible implementations.
type UnimplementedDemoServer struct {
}

func (UnimplementedDemoServer) UnaryDemo(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnaryDemo not implemented")
}
func (UnimplementedDemoServer) BulkUpload(Demo_BulkUploadServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkUpload not implemented")
}
func (UnimplementedDemoServer) BulkDownload(*Request, Demo_BulkDownloadServer) error {
	return status.Errorf(codes.Unimplemented, "method BulkDownload not implemented")
}
func (UnimplementedDemoServer) DoubleStream(Demo_DoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}
func (UnimplementedDemoServer) mustEmbedUnimplementedDemoServer() {}

// UnsafeDemoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DemoServer will
// result in compilation errors.
type UnsafeDemoServer interface {
	mustEmbedUnimplementedDemoServer()
}

func RegisterDemoServer(s grpc.ServiceRegistrar, srv DemoServer) {
	s.RegisterService(&Demo_ServiceDesc, srv)
}

func _Demo_UnaryDemo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DemoServer).UnaryDemo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ire.restgwdemo.v1.Demo/UnaryDemo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DemoServer).UnaryDemo(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Demo_BulkUpload_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).BulkUpload(&demoBulkUploadServer{stream})
}

type Demo_BulkUploadServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type demoBulkUploadServer struct {
	grpc.ServerStream
}

func (x *demoBulkUploadServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoBulkUploadServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Demo_BulkDownload_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DemoServer).BulkDownload(m, &demoBulkDownloadServer{stream})
}

type Demo_BulkDownloadServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type demoBulkDownloadServer struct {
	grpc.ServerStream
}

func (x *demoBulkDownloadServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Demo_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DemoServer).DoubleStream(&demoDoubleStreamServer{stream})
}

type Demo_DoubleStreamServer interface {
	Send(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type demoDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *demoDoubleStreamServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *demoDoubleStreamServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Demo_ServiceDesc is the grpc.ServiceDesc for Demo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Demo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ire.restgwdemo.v1.Demo",
	HandlerType: (*DemoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UnaryDemo",
			Handler:    _Demo_UnaryDemo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "BulkUpload",
			Handler:       _Demo_BulkUpload_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BulkDownload",
			Handler:       _Demo_BulkDownload_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoubleStream",
			Handler:       _Demo_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "demo.proto",
}
