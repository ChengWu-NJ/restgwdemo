syntax = "proto3";

package ire.restgwdemo.v1;
option go_package = "ire.com/restgwdemo/v1/pb";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Scenario:
// There is a storage cluster with storage nodes which vgs are located on.
// We need create storage nodes and vgs, and remove vgs and/or storage nodes if
// needed.

// how google.api.http annotation maps messages between restful and grpc?
// please read
// https://github.com/googleapis/googleapis/blob/master/google/api/http.proto
// here choose an easy way:
// 1. use POST as much as possible
// 2. map all fields by -- body: "*"

service Demo {
  rpc Healthz(google.protobuf.Empty) returns (HealthzResponse) {
    option (google.api.http) = {
      post : "/v1/healthz"
    };
  };

  // UpsertStorNode is idempotent that means two cases:
  // 1. update it if exists
  // 2. oterwise create(/insert) it
  rpc UpsertStorNode(UpsertStorNodeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/UpsertStorNode"
      body : "*"
    };
  }

  rpc GetStorNodeByName(GetStorNodeByNameRequest)
      returns (GetStorNodeByNameResponse) {
    option (google.api.http) = {
      post : "/v1/GetStorNodeByName"
      body : "*"
    };
  }

  rpc DelStorNodeByName(DelStorNodeByNameRequest)
      returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/DelStorNodeByName"
      body : "*"
    };
  }

  rpc UpsertVG(UpsertVGRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/UpsertVG"
      body : "*"
    };
  }

  rpc GetVGById(GetVGByIdRequest) returns (GetVGByIdResponse) {
    option (google.api.http) = {
      post : "/v1/GetVGById"
      body : "*"
    };
  }

  rpc DelVGById(DelVGByIdRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/DelVGById"
      body : "*"
    };
  }
}

message StorNode {
  // @gotags: pg:",pk"
  string name = 1;

  string ip = 2;

  // @gotags: pg:",array"
  repeated string otherIps = 3;

  // @gotags: pg:",hstore"
  map<string, string> attributions = 4;

  // @gotags: pg:",notnull"
  int64 buyNanoTime = 5;

  // @gotags: pg:",type:timestamptz"
  google.protobuf.Timestamp buyTimeStamp = 6;

  // @gotags: pg:",type:timestamptz,default:now()"
  google.protobuf.Timestamp updateTime = 7;

  bool boolField = 8;

  // @gotags: pg:",type:bigserial"
  int64 testSequence = 9;

  // @gotags: pg:"-"
  bool notMap2Orm = 10;
}

message VG {
  // unique globally. always be overwrite to be {stor_hostname}_{vg_name}
  // @gotags: pg:",pk"
  string vgId = 1;

  string storNodeName = 2;
  // @gotags: pg:",rel:has-one"
  StorNode storNode = 99;

  // unqique on storhost, which is the real vg name
  string vgName = 3;
  int64 vgTotalSize = 4;

  VGType vgType = 5;

  // @gotags: pg:",type:timestamptz,default:now()"
  google.protobuf.Timestamp updateTime = 6;
}

enum VGType {
  VG_TYPE_NORMAL = 0;
  VG_TYPE_FAST = 1;
}

message UpsertStorNodeRequest {
  // don't input testSequence and let pg bigserial type to work
  StorNode storNode = 1;
}

message GetStorNodeByNameRequest { string name = 1; }

message GetStorNodeByNameResponse { StorNode storNode = 1; }

message DelStorNodeByNameRequest { string name = 1; }

message UpsertVGRequest { VG vg = 1; }

message GetVGByIdRequest { string vgId = 1; }

message GetVGByIdResponse { VG vg = 1; }

message DelVGByIdRequest { string vgId = 1; }

message HealthzResponse {
  string state = 1;
  google.protobuf.Timestamp htime = 2;
}
