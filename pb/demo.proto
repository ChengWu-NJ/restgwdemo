syntax = "proto3";

package ire.restgwdemo.v1;
option go_package = "ire.com/restgwdemo/v1/pb";

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";

// Scenario:
// There is a storage cluster with storage nodes which vgs are located on.
// We need create storage nodes and vgs, and remove vgs and/or storage nodes if
// needed.

message StorNode {
  // @gotags: pg:",type:bigserial,pk"
  int64 id = 1;

  // @gotags: pg:",unique,notnull"
  string name = 2;

  string ip = 3;

  // @gotags: pg:",array"
  repeated string otherIps = 4;

  // @gotags: pg:",hstore"
  map<string, string> attributions = 5;

  int64 buyNanoTime = 6;

  // @gotags: pg:",type:timestamptz"
  google.protobuf.Timestamp buyTimeStamp = 7;

  // @gotags: pg:",type:timestamptz,default:now()"
  google.protobuf.Timestamp updateTime = 8;

  bool boolField = 9;

  // @gotags: pg:"-"
  bool notMap2Orm = 10;
}

message UpsertStorNodeRequest {
  // don't input id and let pg bigserial type to work
  StorNode storNode = 1;
}

message UpsertStorNodeResponse {
  StorNode storNode = 1; // check id generated by pg bigserial type
}

message HealthzResponse {
  string state = 1;
  google.protobuf.Timestamp htime = 2;
}

service Demo {
  // UpsertStorNode is idempotent that means two cases:
  // 1. update it if exists
  // 2. oterwise create(/insert) it
  rpc UpsertStorNode(UpsertStorNodeRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/UpsertStorNode"
      body : "*"
    };
  }

  rpc Healthz(google.protobuf.Empty) returns (HealthzResponse) {
    option (google.api.http) = {
      post : "/v1/healthz"
    };
  };
}

/*
        rpc UnaryDemo(Request) returns (Response) {
                option (google.api.http) = {
                        post: "/v1/unarydemo"
                        body: "*"
                };
        }

  rpc BulkUpload(stream Request) returns (google.protobuf.Empty) {
                option (google.api.http) = {
                        post: "/v1/bulkupload"
                        body: "*"
                };
  }

        rpc BulkDownload(Request) returns (stream Response) {
                option (google.api.http) = {
                        post: "/v1/bulkdownload"
                        body: "*"
                };
  }

  rpc DoubleStream(stream Request) returns (stream Response) {
                option (google.api.http) = {
                        post: "/v1/doublestream"
                        body: "*"
                };
  }

*/
